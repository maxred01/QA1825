import requests
import time


def test_run_api_tests() -> str:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
    urls = [
        ("https://rocketdata.ru/", '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ("https://go.rocketdata.io/auth/login", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–í–æ–π—Ç–∏"'),
        ("https://rocketdata.ru/partners", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü–ª–æ—â–∞–¥–∫–∏"'),
        ("https://rocketdata.ru/about", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –∫–æ–º–ø–∞–Ω–∏–∏"'),
        ("https://rocketdata.ru/vacancies", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ö–∞—Ä—å–µ—Ä–∞"'),
        ("https://go.rocketdata.io/auth/register", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"'),
        ("https://rocketdata.ru/usecases", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ö–µ–π—Å—ã"'),
        ("https://rocketdata.ru/rates", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–¢–∞—Ä–∏—Ñ—ã"'),
        ("https://rocketdata.ru/agencies", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ë–ª–æ–≥"'),
        ("https://rocketdata.ru/experts", '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–≠–∫—Å–ø–µ—Ä—Ç—ã"')

    ]

    results = []
    passed_count = 0
    failed_count = 0

    for url, name in urls:
        try:
            start_time = time.time()
            response = requests.get(url, timeout=10)
            response_time = round((time.time() - start_time) * 1000)
            status = response.status_code

            if status == 200:
                result = f"‚úÖ {name} ({url}) - –£—Å–ø–µ—à–Ω–æ! –°—Ç–∞—Ç—É—Å: {status}, –í—Ä–µ–º—è: {response_time}–º—Å"
                passed_count += 1
            else:
                result = f"‚ùå {name} ({url}) - –û—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: {status} (–æ–∂–∏–¥–∞–ª—Å—è 200), –í—Ä–µ–º—è: {response_time}–º—Å"
                failed_count += 1

        except Exception as e:
            result = f"‚ö†Ô∏è {name} ({url}) - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            failed_count += 1

        results.append(result)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tests = len(urls)
    success_rate = round(passed_count / total_tests * 100) if total_tests else 0

    summary = (
        f"\n\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed_count}\n"
        f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed_count}\n"
        f"üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
        f"üèÅ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate}%"
    )

    return "\n".join(results) + summary
