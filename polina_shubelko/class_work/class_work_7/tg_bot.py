import requests
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)

from test_api import test_run_api_tests

TOKEN = "8156293984:AAF9EszcYfG-Wmi9SCKbzTBcpNsOq9owog0"
ABOUT_TEXT = """*–û–±–æ –º–Ω–µ*
–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç *–ü–æ–ª–∏–Ω–∞ –®—É–±–µ–ª—å–∫–æ*, –∏ —è –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–π –ø—É—Ç—å. 
–ó–∞–∫–æ–Ω—á–∏–ª–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ 3 –≥–æ–¥–∞ –≤ –≥–æ—Å–∞—Ö, –∏ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. 
–ü–æ–ø–∞–ª–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫—É—é it-–∫–æ–º–ø–∞–Ω–∏—é, –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é —É–∂–µ —Ç—Ä–µ—Ç–∏–π –≥–æ–¥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.
–ì–æ–≤–æ—Ä—è—Ç –ª—é–±–æ–≤—å –∂–∏–≤–µ—Ç —Ç—Ä–∏ –≥–æ–¥–∞, –≤–æ—Ç –∏ —è —Ä–µ—à–∏–ª–∞ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–ª–∞–≤—É –≤ —Å–≤–æ–µ–π —Ç—Ä—É–¥–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 
–î–æ—Ä–æ–≥–∏ –ø—Ä–∏–≤–µ–ª–∏ –º–µ–Ω—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏ –º–Ω–µ —Ç—É—Ç –Ω—Ä–∞–≤–∏—Ç—Å—è.
"""

ALLOWED_USERS = [1115361815]


async def check_response_time(url: str) -> dict:
    result = {
        'status_code': None,
        'response_time_ms': None,
        'content_size': None,
        'error': None
    }

    try:
        start_time = time.time()
        response = requests.get(url, timeout=10)
        end_time = time.time()

        result['status_code'] = response.status_code
        result['response_time_ms'] = round((end_time - start_time) * 1000)
        result['content_size'] = len(response.content)

    except requests.exceptions.RequestException as e:
        result['error'] = str(e)

    return result


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã", callback_data="run_tests")],
        [InlineKeyboardButton("–û–±–æ –º–Ω–µ", callback_data="about"),
         InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å URL)\n"
        "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å API-—Ç–µ—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=ABOUT_TEXT,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(ABOUT_TEXT, parse_mode="Markdown")


async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ü–æ–ª–∏–Ω–µ", url="https://t.me/polinashubelko")]
    ])

    text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ Telegram:"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


async def check_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()

    if not url.startswith(("http://", "https://")):
        url = "https://" + url

    site_info = await check_response_time(url)

    if site_info['error']:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: `{site_info['error']}`", parse_mode="Markdown")
    else:
        message = (
            f" *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {url}:*\n"
            f" –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: `{site_info['status_code']}`\n"
            f" –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: `{site_info['response_time_ms']} –º—Å`\n"
            f" –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: `{site_info['content_size']} –±–∞–π—Ç`"
        )
        await update.message.reply_text(message, parse_mode="Markdown")


async def run_tests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        message = update.callback_query.message
    else:
        user_id = update.message.from_user.id
        message = update.message

    if user_id not in ALLOWED_USERS:
        response = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!"
        if update.callback_query:
            await update.callback_query.answer(response, show_alert=True)
        else:
            await message.reply_text(response)
        return

    if update.callback_query:
        await update.callback_query.answer()
        status_message = await update.callback_query.edit_message_text(
            "üöÄ –ó–∞–ø—É—Å–∫–∞—é API-—Ç–µ—Å—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
    else:
        status_message = await update.callback_query.edit_message_text(
            "üöÄ –ó–∞–ø—É—Å–∫–∞—é API-—Ç–µ—Å—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        ) if update.callback_query else await message.reply_text(
            "üöÄ –ó–∞–ø—É—Å–∫–∞—é API-—Ç–µ—Å—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )

    try:
        loop = asyncio.get_running_loop()
        test_results = await loop.run_in_executor(None, test_run_api_tests)

        response_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã API-—Ç–µ—Å—Ç–æ–≤:</b>\n\n{test_results}"
        await context.bot.edit_message_text(
            chat_id=status_message.chat_id,
            message_id=status_message.message_id,
            text=response_text,
            parse_mode="HTML"
        )
    except Exception as e:
        error_text = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:</b>\n{str(e)}"
        await context.bot.edit_message_text(
            chat_id=status_message.chat_id,
            message_id=status_message.message_id,
            text=error_text,
            parse_mode="HTML"
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "run_tests":
        await run_tests_command(update, context)
    elif query.data == "about":
        await about(update, context)
    elif query.data == "contact":
        await contact(update, context)


def main() -> None:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("contact", contact))
    app.add_handler(CommandHandler("runtests", run_tests_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_url))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()


if __name__ == "__main__":
    main()