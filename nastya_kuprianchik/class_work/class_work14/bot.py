from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import zipfile
import time
import asyncio
from pathlib import Path

async def execute_command(cmd: str, update: Update, timeout: int = 300) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç shell-–∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        proc = await asyncio.create_subprocess_shell(
            cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await asyncio.wait_for(proc.communicate(), timeout)
        output = f"STDOUT:\n{stdout.decode().strip()}" if stdout else ""
        output += f"\nSTDERR:\n{stderr.decode().strip()}" if stderr else ""
        return output.strip()
    except asyncio.TimeoutError:
        return f"‚ùå –¢–∞–π–º–∞—É—Ç ({timeout} —Å–µ–∫)"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"


async def run_tests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path("./allure-results")
    results_dir.mkdir(exist_ok=True)

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for file in results_dir.glob("*"):
        file.unlink()

    # –ó–∞–ø—É—Å–∫ pytest
    result = await execute_command(
        "pytest -s -v tests --alluredir=./allure-results",
        update
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    if not any(results_dir.iterdir()):
        await update.message.reply_text("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: allure-results –ø—É—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    short_result = "\n".join([line for line in result.split("\n") if "FAILED" in line or "ERROR" in line])
    await update.message.reply_text(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n{short_result[:3000]}" if short_result else "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
    )


async def generate_allure_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        results_dir = Path("./allure-results")
        if not results_dir.exists() or not any(results_dir.iterdir()):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞: –ø–∞–ø–∫–∞ allure-results –ø—É—Å—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        await update.message.reply_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é Allure-–æ—Ç—á–µ—Ç...")
        report_dir = Path("./allure-report")
        report_dir.mkdir(exist_ok=True)

        gen_result = await execute_command(
            "allure generate ./allure-results --clean -o ./allure-report",
            update
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_index = report_dir / "index.html"
        if not report_index.exists():
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ allure-report")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        await update.message.reply_text("üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...")
        timestamp = int(time.time())
        zip_name = f"allure_report_{timestamp}.zip"

        with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º allure-report
            for root, _, files in os.walk(report_dir):
                for file in files:
                    file_path = Path(root) / file
                    arcname = os.path.join("allure-report", os.path.relpath(file_path, report_dir))
                    zipf.write(file_path, arcname=arcname)

            # –î–æ–±–∞–≤–ª—è–µ–º allure-results
            for root, _, files in os.walk(results_dir):
                for file in files:
                    file_path = Path(root) / file
                    arcname = os.path.join("allure-results", os.path.relpath(file_path, results_dir))
                    zipf.write(file_path, arcname=arcname)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤...")
        with open(zip_name, 'rb') as zip_file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=zip_file,
                filename=zip_name,
                caption="üìä Allure Report (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
            )

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.remove(zip_name)
        await update.message.reply_text("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def full_cycle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ç–µ—Å—Ç—ã + –æ—Ç—á–µ—Ç"""
    await run_tests(update, context)
    await generate_allure_report(update, context)


async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    about_text = """
ü§ñ *Allure Report Bot*
–í–µ—Ä—Å–∏—è: 21
–ê–≤—Ç–æ—Ä: –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
\-\ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ \(\ runtests \)\ \n
\-\ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ \(\ allurereport \)\ \n
\-\ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª \(\ fullreport \)\
    """
    await update.message.reply_text(
        about_text.strip(),
        parse_mode='MarkdownV2',
        disable_web_page_preview=True
    )


def main():
    application = Application.builder().token("7263256379:AAHXS-jb1zK7WbcuMLqFL8Sv049gnHtQPX0").build()

    handlers = [
        CommandHandler("runtests", run_tests),
        CommandHandler("allurereport", generate_allure_report),
        CommandHandler("fullreport", full_cycle),
        CommandHandler("about", about)
    ]

    for handler in handlers:
        application.add_handler(handler)

    application.run_polling()


if __name__ == "__main__":
    main()